@use "sass:math";

$grid-columns: 12;
// Can change the number, but regular count is 12

// base layout classes
.container {
  width: 100%;
  max-width: 1200px;
  margin: 0 auto;
  // Margin auto left to right to centralize the container
  padding: 0 20px;
  box-sizing: border-box;
  // Padding and border if had one is incorporated into the
  // total width
}
.row {
  // Row element for grid
  display: flex;
  // makes every column in grid a flex item
  flex-flow: row wrap;
  // If the screen gets too small it is going to wrap columns to
  // next row down if not enough place for the columns
}

// col classes
// .col-xs-12 - this means that on extra small screens
// give this element a width of 12 columns taking the howl width
// of the grid.
// .col-md-6 takes 6 columns
@include xs {
  // This is not going into a select.
  // Before we placed it inside a selector like:
  // .test {
  //   @include xs{

  //   } 
  // }
  // But now we place the mixin autside and inside create different
  // selectors
  // All it does says find this mixin in _breakpoints using media query
  // and then whatever we place inside this mixing we will output in
  // @content within _breakpoints.scss

  // We cycle trough columns 1-12 generating class for xs screens like:
  // .col-xs-1, .col-xs-2, .col-xs-3 - for each column width

  @for $i from 1 through $grid-columns {
    // Cycle trough something 12 times and create a class
    .col-#{$i}-xs {
      box-sizing: border-box;
      flex-grow: 0;
      // So that it wouldn't grow
      width: math.div($i * 100%, $grid-columns);
      // Use divide method from math package and divide it by
      // grid columns. So for col-1 it will be 100%/12, next
      // 200%/12, then 300%/12 etc. So we are adding a column
      // in width
    }
  }
}

@include sm {
  @for $i from 1 through $grid-columns {
    .col-#{$i}-sm {
      box-sizing: border-box;
      flex-grow: 0;
      width: math.div($i * 100%, $grid-columns);
    }
  }
}

@include md {
  @for $i from 1 through $grid-columns {
    .col-#{$i}-md {
      box-sizing: border-box;
      flex-grow: 0;
      width: math.div($i * 100%, $grid-columns);
      // Theoretically you should modify this math so that
      // it would make sense
    }
  }
}

@include lg {
  @for $i from 1 through $grid-columns {
    .col-#{$i}-lg {
      box-sizing: border-box;
      flex-grow: 0;
      width: math.div($i * 100%, $grid-columns);
      // Theoretically you should modify this math so that
      // it would make sense 
    }
  }
}

@include xl {
  @for $i from 1 through $grid-columns {
    .col-#{$i}-xl {
      box-sizing: border-box;
      flex-grow: 0;
      width: math.div($i * 100%, $grid-columns);
      // Theoretically you should modify this math so that
      // it would make sense
    }
  }
}
