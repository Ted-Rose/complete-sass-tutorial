@use "sass:math";

$grid-columns: 12;
$grid-gaps: (
  "0": 0,
  "1": 10px,
  "2": 20px,
  "3": 30px,
);
$layout-values: flex-start, flex-end, center, space-between, space-around;

$grid-gaps: (
  "0": 0,
  // Creates class 0 with value 0
  "1": 10px,
  "2": 20px,
  "3": 30px,
);

$layout-values: flex-start, flex-end, center, space-between, space-around;

// base layout classess
.container {
  width: 100%;
  max-width: 1200px;
  margin: 0 auto;
  padding: 0 20px;
  box-sizing: border-box;
}
.row {
  display: flex;
  flex-flow: row wrap;
}

// grid gaps
@each $key, $val in $grid-gaps {
  .gap-#{$key} > * {
    padding: $val;
  }
}
// Grid gaps
@each $key, $val in $grid-gaps {
  .gap-#{$key} > * {
    // Grab the immediate items inside the grid gap
    // So it adds padding to every item within this grid.
    // Also could sat get all of the flex items and apply
    // padding to that 
    padding: $val;
    // Creates padding value for multiple classes
  }
  .gap-#{$key} {
    margin-left: -$val;
    margin-right: -$val;
    // We reduce the padding of the row by substracting the 
    // same amount using negative margin. So that the boxes
    // would be closer to the edges
  }
}

// Justify content classes
@each $val in $layout-values {
  // We don't need a key, because now we don't have a map but
  // a list
  .justify-#{$val} {
    justify-content: $val;
  }
}

// col classes
// .col-xs-12 - this means that on extra small screens
// give this element a width of 12 columns taking the howl width
// of the grid.
// .col-md-6 takes 6 columns
@include xs {
  // This is not going into a select.
  // Before we placed it inside a selector like:
  // .test {
  //   @include xs{

  //   } 
  // }
  // But now we place the mixin autside and inside create different
  // selectors
  // All it does says find this mixin in _breakpoints using media query
  // and then whatever we place inside this mixing we will output in
  // @content within _breakpoints.scss

  // We cycle trough columns 1-12 generating class for xs screens like:
  // .col-xs-1, .col-xs-2, .col-xs-3 - for each column width

  @for $i from 1 through $grid-columns {
    // Cycle trough something 12 times and create a class
    .col-#{$i}-xs {
      box-sizing: border-box;
      flex-grow: 0;
      // So that it wouldn't grow
      width: math.div($i * 100%, $grid-columns);
      // Use divide method from math package and divide it by
      // grid columns. So for col-1 it will be 100%/12, next
      // 200%/12, then 300%/12 etc. So we are adding a column
      // in width
    }
  }
}
@include sm {
  @for $i from 1 through $grid-columns {
    .col-#{$i}-sm {
      box-sizing: border-box;
      flex-grow: 0;
      width: math.div($i * 100%, $grid-columns);
    }
  }
}
@include md {
  @for $i from 1 through $grid-columns {
    .col-#{$i}-md {
      box-sizing: border-box;
      flex-grow: 0;
      width: math.div($i * 100%, $grid-columns);
    }
  }
}
@include lg {
  @for $i from 1 through $grid-columns {
    .col-#{$i}-lg {
      box-sizing: border-box;
      flex-grow: 0;
      width: math.div($i * 100%, $grid-columns);
    }
  }
}
@include xl {
  @for $i from 1 through $grid-columns {
    .col-#{$i}-xl {
      box-sizing: border-box;
      flex-grow: 0;
      width: math.div($i * 100%, $grid-columns);
    }
  }
}
